import re
from pathlib import Path

import numpy as np
import pandas as pd

DATA_COLUMNS = ["Region name", "Measurement type", "Matter", "Hemisphere", "Value"]


def get_type(label: str) -> str:
    """
    helper function to figure out whether the type for the given measurement. It isn't fully tested to work for Area,
    Holed, Thickness. The purpose is mainly to identify volumetric measurements
    :param label: string containing the nsame of the measurement
    :return: string containing the type for given measurement
    """
    if re.findall("Vol", label):
        return "Vol"
    elif re.findall("Area", label):
        return "Area"
    elif re.findall("Holes", label):
        return "Holes"
    elif re.findall("Thickness", label):
        return "Thickness"
    elif re.findall("eTIV", label):
        return "Volume"


def from_head(text: str) -> pd.DataFrame:
    """
    function to read measurements from the header / comments section of FreeSurfer stat files
    :param text: single string of file contents
    :return: measurements found in the header section
    """
    formatted_data = pd.DataFrame(columns=DATA_COLUMNS)
    file_lines = text.split("\n")

    for line in file_lines:
        # All measurements follow a similar pattern:
        # "# Measure <region name>, <measurement name>, <description>, <value> ..."
        measure = re.findall("# Measure ([a-zA-z]+?), ([a-zA-z]+?), .+, ([0-9]+.[0-9]+), ", line)

        if len(measure):
            region_name = measure[0][0]
            hemisphere = "Left" if region_name[0] == "l" else ("Right" if region_name[0] == "r" else "N/A")
            type = get_type(measure[0][1])
            w_g = "N/A"
            if re.findall("White", region_name):
                w_g = "White"
            elif re.findall("Cortex", region_name):
                w_g = "Grey"

            row = {
                "Region name": region_name,
                "Measurement type": type,
                "Matter": w_g,
                "Hemisphere": hemisphere,
                "Value": measure[0][-1]
            }

            # add measurement to dataframe
            formatted_data = formatted_data.append(row, ignore_index=True)

    return formatted_data


def read_aseg(data_dir: Path) -> pd.DataFrame:
    """
    aseg.stats contains Left/Right-Cerebellum-White-Matter, lh/rhCorticalWhiteMatter, CorticalWhiteMatter,
    Left/Right-Cerebellum-Cortex, lh/rhCortex, Cortex
    Some measurements are in the ribbon/comments of the file
    :param data_dir: path to FreeSurfer output folder for MRI
    :return: dataframe containing volumetric measurements described above
    """
    data = np.loadtxt(data_dir.joinpath("stats/aseg.stats"), dtype=str)[:-2]

    file = open(data_dir.joinpath("stats/aseg.stats"), "r")
    contents = file.read()
    file.close()

    formatted_data = pd.DataFrame(columns=DATA_COLUMNS)

    for region_name in data[:, 4]:
        [volume, mean_si] = data[data[:, 4] == region_name, [3, 5]]
        hemisphere = "Left" if region_name[0] == "L" else ("Right" if region_name[0] == "R" else "N/A")

        w_g = "N/A"
        if re.findall("White", region_name):
            w_g = "White"
        elif re.findall("Cortex", region_name):
            w_g = "Grey"
        volume_row = {
            "Region name": region_name, "Measurement type": "Vol", "Matter": w_g, "Hemisphere": hemisphere,
            "Value": volume
        }
        si_row = {
            "Region name": region_name, "Measurement type": "SI (mean)", "Matter": w_g, "Hemisphere": hemisphere,
            "Value": mean_si
        }

        formatted_data = formatted_data.append(volume_row, ignore_index=True)
        formatted_data = formatted_data.append(si_row, ignore_index=True)

    ribbon_data = from_head(contents)
    formatted_data = formatted_data.append(ribbon_data, ignore_index=True)

    return formatted_data


def read_lhaparc(data_dir: Path) -> pd.DataFrame:
    """
    read lh.aparc.stats file generated by FreeSurfer contains grey matter volumes from the left hemisphere.
    There aren't any measurements of interest in the header so we don't look at it
    :param data_dir: path to FreeSurfer output folder for MRI
    :return: dataframe containing volumetric measurements described above
    """
    data = np.loadtxt(data_dir.joinpath("stats/lh.aparc.stats"), dtype=str)

    region_names = data[:, 0]
    values = data[:, 3].astype(float)
    type = np.repeat("Vol", np.shape(data)[0])
    hemisphere = np.repeat("Left", np.shape(data)[0])
    w_g = np.repeat("Grey", np.shape(data)[0])

    formatted_data = pd.DataFrame(np.transpose([region_names, type, w_g, hemisphere, values]), columns=DATA_COLUMNS)

    return formatted_data


def read_rhaparc(data_dir: Path) -> pd.DataFrame:
    """
    read rh.aparc.stats file generated by FreeSurfer contains grey matter volumes from the right hemisphere.
    There aren't any measurements of interest in the header so we don't look at it
    :param data_dir: path to FreeSurfer output folder for MRI
    :return: dataframe containing volumetric measurements described above
    """
    data = np.loadtxt(data_dir.joinpath("stats/rh.aparc.stats"), dtype=str)

    region_names = data[:, 0]
    values = data[:, 3].astype(float)
    type = np.repeat("Vol", np.shape(data)[0])
    hemisphere = np.repeat("Right", np.shape(data)[0])
    w_g = np.repeat("Grey", np.shape(data)[0])

    formatted_data = pd.DataFrame(np.transpose([region_names, type, w_g, hemisphere, values]), columns=DATA_COLUMNS)

    return formatted_data


def read_lhwgpct(data_dir: Path) -> pd.DataFrame:
    """
    read lh.w-g.pct.stats file generated by FreeSurfer contains grey matter signal intensities from the left hemisphere.
    There aren't any measurements of interest in the header so we don't look at it
    :param data_dir: path to FreeSurfer output folder for MRI
    :return: dataframe containing mean signal intensity measurements described above
    """
    # ignore first line as it is region is unknown
    data = np.loadtxt(data_dir.joinpath("stats/lh.w-g.pct.stats"), dtype=str)[1:]

    region_names = data[:, 4]
    values = data[:, 5].astype(float)
    type = np.repeat("SI (mean)", np.shape(data)[0])
    hemisphere = np.repeat("Left", np.shape(data)[0])
    w_g = np.repeat("Grey", np.shape(data)[0])

    formatted_data = pd.DataFrame(np.transpose([region_names, type, w_g, hemisphere, values]), columns=DATA_COLUMNS)

    return formatted_data


def read_rhwgpct(data_dir: Path) -> pd.DataFrame:
    """
    read rh.w-g.pct.stats file generated by FreeSurfer contains grey matter signal intensities from the right hemisphere
    There aren't any measurements of interest in the header so we don't look at it
    :param data_dir: path to FreeSurfer output folder for MRI
    :return: dataframe containing mean signal intensity measurements described above
    """
    # ignore first line as it is region is unknown
    data = np.loadtxt(data_dir.joinpath("stats/rh.w-g.pct.stats"), dtype=str)[1:]

    region_names = data[:, 4]
    values = data[:, 5].astype(float)
    type = np.repeat("SI (mean)", np.shape(data)[0])
    hemisphere = np.repeat("Right", np.shape(data)[0])
    w_g = np.repeat("Grey", np.shape(data)[0])

    formatted_data = pd.DataFrame(np.transpose([region_names, type, w_g, hemisphere, values]), columns=DATA_COLUMNS)

    return formatted_data


def read_wmparc(data_dir: Path) -> pd.DataFrame:
    """
    wmparc.stats contains the white matter volume and SI measures
    :param data_dir: path to FreeSurfer output folder for MRI
    :return: dataframe containing white matter volume and mean SI
    """

    # Last two rows are unsegmented region measurements which are not of interest
    data = np.loadtxt(data_dir.joinpath("stats/wmparc.stats"), dtype=str)[:-2]

    formatted_data = pd.DataFrame(columns=DATA_COLUMNS)

    for i in range(np.shape(data)[0]):
        region_name = data[i, 4]

        [_, hemisphere, region_name] = region_name.split("-")
        hemisphere = "Left" if hemisphere == "lh" else "Right"
        [volume, si] = data[i, [3, 5]]

        volume_row = {
            "Region name": region_name, "Measurement type": "Vol", "Matter": "White", "Hemisphere": hemisphere,
            "Value": volume
        }
        si_row = {
            "Region name": region_name, "Measurement type": "SI (mean)", "Matter": "White", "Hemisphere": hemisphere,
            "Value": si
        }

        formatted_data = formatted_data.append(volume_row, ignore_index=True)
        formatted_data = formatted_data.append(si_row, ignore_index=True)

    return formatted_data
